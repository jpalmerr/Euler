/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
 */

object Fibonacci extends App {

  def fib(n: Int): Int = {
    @scala.annotation.tailrec
    def fib_tail(n: Int, a: Int, b: Int): Int = {
      n match {
        case 0 => a
        case _ => fib_tail(n-1, b, a + b)
      }
    }
    fib_tail(n, 0 ,1)
  }

  println(fib(0))
  println(fib(1))
  println(fib(2))
  println(fib(3))
  println(fib(4))
  println(fib(5))

  lazy val fibList: LazyList[Int] = LazyList.cons(0, LazyList.cons(1, fibList.zip(fibList.tail).map(p => p._1 + p._2)))
  fibList.filter(_ % 2 == 0).takeWhile(_ <= 4000000).sum

  println(fibList.filter(_ % 2 == 0).takeWhile(_ <= 4000000).sum)

}
